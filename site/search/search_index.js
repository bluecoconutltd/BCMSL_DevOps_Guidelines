var __index = {"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Guidelines","text":""},{"location":"index.html#bcmsl-react-project-development-guidelines","title":"BCMSL REACT Project Development Guidelines","text":"<p>This document provides a standard guide for creating Software Development Projects. It was created for and by the Development department of Blue Coconut Multimedia Solutions Limited.  </p> <p>Please Note: This document was produced for developers working on  Microsoft Windows Operating Systems using  Git Bash to run common Unix commands and utilities.</p> <p> <code>All Rights Reserved \u00a9 2023</code></p>"},{"location":"index.html#about-us","title":"About Us","text":"<p>Blue Coconut Multimedia Solutions Limited is a dynamic and innovative company that specializes in providing cutting-edge multimedia solutions. Our team of experts is dedicated to delivering high-quality and creative content that exceeds our clients' expectations.</p>"},{"location":"index.html#our-services","title":"Our Services","text":"<ul> <li>Visuals: From stunning graphics to captivating videos, we've got you covered.</li> <li>Audio: Our audio team can create engaging soundscapes and music to enhance your project.</li> <li>Web Development: We can help you build a beautiful and functional website to showcase your brand.</li> <li>Marketing: Let us help you reach your target audience with our effective marketing strategies.</li> </ul>"},{"location":"index.html#contact-us","title":"Contact Us","text":"<p>Get in touch with us to learn more about how we can help bring your vision to life. info@bluecoconut.ltd</p> <p>License Notice</p> <p>Blue Coconut Multimedia Solutions Limited 52A Eccles Road, Grand Lagoon, Mayaro, Trinidad and Tobago, W.I. info@bluecoconut.ltd </p> <p>All Rights Reserved under the: MIT License (2023) </p>"},{"location":"build.html","title":"4. Building Project","text":""},{"location":"build.html#41-building-the-documentation","title":"4.1 Building the Documentation","text":""},{"location":"build.html#converting-the-documentation-to-html-website","title":"Converting the documentation to HTML Website","text":"<ul> <li> <p>4.1.1 - After satisfactorily completing the project documentation, save all files and commit necessary changes to designated Github repository.</p> </li> <li> <p>4.1.2 - Navigate to the project folder via the  PowerShell Terminal and run <code>mkdocs build</code> to build the documentation site.</p> </li> </ul>"},{"location":"build.html#42-building-the-app","title":"4.2 Building the App","text":""},{"location":"build.html#converting-the-project-to-web-app","title":"Converting the Project to Web App","text":"<ul> <li> <p>4.2.1 - After satisfactorily completing the app project, save all files and commit necessary changes to designated Github repository.</p> </li> <li> <p>4.2.2 - Navigate to the project folder via the  PowerShell Terminal and run <code>nmp run build</code> to build the web app.</p> </li> </ul> <p>License Notice</p> <p>Blue Coconut Multimedia Solutions Limited 52A Eccles Road, Grand Lagoon, Mayaro, Trinidad and Tobago, W.I. info@bluecoconut.ltd </p> <p>All Rights Reserved under the: MIT License (2023) </p>"},{"location":"changelog.html","title":"Changelog","text":""},{"location":"changelog.html#_2","title":"Changelog","text":""},{"location":"changelog.html#changelog","title":"CHANGELOG","text":""},{"location":"changelog.html#verified-release","title":"Verified Release","text":"<p>License Notice</p> <p>Blue Coconut Multimedia Solutions Limited 52A Eccles Road, Grand Lagoon, Mayaro, Trinidad and Tobago, W.I. info@bluecoconut.ltd </p> <p>All Rights Reserved under the: MIT License (2023) </p>"},{"location":"create.html","title":"1. Create Project","text":""},{"location":"create.html#11-creating-github-repository","title":"1.1 Creating GitHub Repository","text":""},{"location":"create.html#creating-the-private-github-repository","title":"Creating the (Private) GitHub Repository","text":"<p>This section of the guide provides standard instructions for creating a Private Github Repository. Before proceeding, please ensure all the requirements are met and Security Authentications are setup in Git. These instructions were created for and by the Software Development department of Blue Coconut Multimedia Solutions Limited using the GitHub/bluecoconutltd repositories.</p> <ul> <li> <p>1.1.1 - In the upper-right corner of any page on Github, select the + icon and use the drop-down menu, and select New Repository. </p> </li> <li> <p>1.1.2 - Type the [Project Name] and add a description of the Repository eg: \"Blue Coconut Multimedia Solutions Limited Software Developer Guidelines\".</p> </li> <li> <p>1.1.3 - Set the repository visibility to Private and check Initialize this Repository with a README.md file, then choose MIT License and Click Create repository. </p> </li> <li> <p>1.1.4 - Assigned Members should now be able to view the  Private Github repository. </p> </li> </ul>"},{"location":"create.html#12-setting-up-documentation","title":"1.2 Setting Up Documentation","text":""},{"location":"create.html#creating-the-project-folder-with-documentation","title":"Creating the Project Folder (with Documentation)","text":"<p>The method described below allows for a clean professional setup of a development workspace with the use of proper documentation for clients. Please ensure the Requirements are met before proceeding since it assists the developer(s) it completing the proceeding steps.</p> <ul> <li> <p>1.2.1 - Right-click in the <code>APP_DEV/BCMSL_REACT_PROJECTS</code> folder and click Open with Code to open the folder in the Visual Studio Code IDE application. </p> </li> <li> <p>1.2.2 - Once Visual Studio Code is properly opened, please sign-in with your Github Account, then go to Terminal &gt; New Terminal or press Ctrl+Shift+` to launch a New Terminal (  CMD or  PowerShell ). </p> </li> </ul> <p>Alternative Option: Using Repository Template</p> <p>Sign into  Visual Studio Code using  Github Account and Turn on Settings Sync,  </p> <p> </p> <p>then go to the Github Repository and click the Use this template button  </p> <p> or use any of the options under the &lt;Code&gt; button.  </p> <p> </p> <ul> <li>1.2.3 - Next, install MkDocs by running <code>pip install mkdocs</code> from the command line in the  PowerShell Terminal.</li> </ul> <p>Install the Following Dependencies!</p> <ul> <li>Material for MkDocs - a theme for MkDocs <pre><code>pip install mkdocs-material\n</code></pre></li> <li>YAML VS Code Extension - a verified Visual Studio Code Extension for YAML Language support <pre><code>code --install-extension redhat.vscode-yaml\n</code></pre></li> <li>Add the following Material for MkDocs YAML schema to the user <code>settings.json</code> file in Visual Studio Code. Go to File &gt; Preferences &gt; Settings or press Ctrl+Shift+P then type &gt;<code>settings.json</code> and select <code>Preferences: Open User Settings (JSON)</code>.</li> </ul> settings.json<pre><code>    \"yaml.schemas\": {\n\"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\"\n},\n\"yaml.customTags\": [ \"!ENV scalar\",\n\"!ENV sequence\",\n\"tag:yaml.org,2002:python/name:materialx.emoji.to_svg\",\n\"tag:yaml.org,2002:python/name:materialx.emoji.twemoji\",\n\"tag:yaml.org,2002:python/name:pymdownx.superfences.fence_code_format\"\n]\n</code></pre> <ul> <li>Mike - a Python utility that makes it easy to deploy multiple versions of the document to a Git branch. <pre><code>pip install mike\n</code></pre></li> <li>git-revision-date-localized - a plugin that supports adding the date of last update and creation of a document at the bottom of each page. <pre><code>pip install mkdocs-git-revision-date-localized-plugin\n</code></pre></li> <li>git-committers - a plugin that renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. <pre><code>pip install mkdocs-git-committers-plugin-2\n</code></pre></li> <li>git-authors - a plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. <pre><code>pip install mkdocs-git-authors-plugin\n</code></pre></li> <li>MkDocs GLightbox - a MkDocs plugin that supports image lightbox with GLightbox. <pre><code>pip install mkdocs-glightbox\n</code></pre></li> <li>LXML Parser - a very simple and powerful API for parsing XML and HTML that supports one-step parsing as well as step-by-step parsing using an event-driven API. <pre><code>pip install lxml\n</code></pre></li> <li>Cairo Graphics - a graphics library and dependency of Pillow, which Material for MkDocs makes use of for generating social cards and performing image optimization. <pre><code>pip install pillow cairosvg\n</code></pre></li> <li>MkDocs Table Reader - a  import data from a CSV or Excel file for data tables: <pre><code>pip install mkdocs-table-reader-plugin\n</code></pre></li> </ul> <ul> <li> <p>1.2.4 - In the PowerShell Terminal run the following command <code>mkdocs new [dir-name]</code> replacing <code>[dir-name]</code> with the project folder name. </p> </li> <li> <p>1.2.5 - Open the created <code>mkdocs.yml</code> file and rename the <code>site_name: My Docs</code> to <code>site_name: BCMSL_[Project Name]</code> replacing <code>[Project Name]</code> with the assigned project's name e.g: BCMSL_Admin_App.</p> </li> </ul>"},{"location":"create.html#13-creating-react-app","title":"1.3 Creating React App","text":""},{"location":"create.html#create-react-app-using-vitejs","title":"Create React App (using ViteJS)","text":"<ul> <li> <p>1.3.1 - Ensure NodeJS and NPM are installed by running the following commands in the PowerShell Terminal <code>node -v</code> and <code>npm -v</code> one after the other. Please carefully observe the NPM version.</p> </li> <li> <p>1.3.2a - To create a React app using Vite with NPM version 6.X :    Run the following command in the PowerShell Terminal <code>npm create vite@latest BCMSL_[Project Name] --template react</code> replacing <code>[Project Name]</code> with the project's name. </p> </li> <li> <p>1.3.2b - To create a React app using Vite with NPM version +7.X  :    Run the following command in the PowerShell Terminal <code>npm create vite@latest BCMSL_[Project Name] -- --template react</code> replacing <code>[Project Name]</code> with the project's name. </p> </li> <li> <p>1.3.3 - In the PowerShell Terminal you may be prompted to install Vite simply type <code>'y'</code> and press Enter to accept or run the following command <code>npm i vite</code>.</p> </li> <li> <p>1.3.4 - You will be prompted to choose your framework template, select <code>React</code>, then choose your template variant language, select <code>JavaScript</code> and continue installation. </p> </li> </ul> <p>Note: CLI Terminal Usage</p> <p>These images are basic examples. Both  CMD or PowerShell Terminals would produce the same outputs or trigger the necessary terminal when running commands. Unless explicitly advised in certain instances, the developer would be required to manually switch to a specific CLI to run some commands. Example: Using Git Bash for Unix-like Commands.</p> <ul> <li> <p>1.3.5 - After the project folder is created by MkDocs, run <code>cd [dir-name]</code> replacing <code>[dir-name]</code> with the project folder name to navigate to the project folder in the PowerShell Terminal.</p> </li> <li> <p>1.3.6 - In the PowerShell Terminal run <code>npm install</code> to install the Vite+React packages and file system.  </p> </li> </ul> <p>License Notice</p> <p>Blue Coconut Multimedia Solutions Limited 52A Eccles Road, Grand Lagoon, Mayaro, Trinidad and Tobago, W.I. info@bluecoconut.ltd </p> <p>All Rights Reserved under the: MIT License (2023) </p>"},{"location":"license.html","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2023 Blue Coconut Multimedia Solutions Limited - info@bluecoconut.ltd</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"modify.html","title":"3. Modify Project","text":""},{"location":"modify.html#31-updating-mkdocs-configuration","title":"3.1 Updating MkDocs Configuration","text":""},{"location":"modify.html#updating-the-mkdocsyaml-file","title":"Updating the mkdocs.yaml file","text":"<p>After successfully Creating the Project Template, this step guides the developer to begin customizing the documentation template with relevant configurations data.</p> <ul> <li>3.1.1 - Add or Uncomment the following plugins in the <code>mkdocs.yaml</code> file in the root directory by pressing Ctrl+/ and save the changes.</li> </ul> mkdocs.yaml<pre><code>plugins:\n- search:\nseparator: '[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&amp;[lg]t;'\n- glightbox\n- git-authors\n- git-revision-date-localized:\nenable_creation_date: true\ntype: timeago\n- git-committers:\nrepository: bluecoconutltd/BCMSL_[Project Name]\nbranch: main\n- offline\n</code></pre> <p>Important Reminder!</p> <p>Please rename the <code>site_name: BCMSL_[Project Name]</code> replacing <code>[Project Name]</code> with the assigned project's name.</p> <p></p>"},{"location":"modify.html#32-updating-template-data","title":"3.2 Updating Template Data","text":""},{"location":"modify.html#updating-the-vitejsreact-mkdocs-favicons-and-template-data","title":"Updating the ViteJS+React &amp; MkDocs Favicons and Template Data","text":"<ul> <li> <p>3.2.1 - In the <code>docs</code> folder create an <code>assets</code> folder containing an <code>img</code>, <code>css</code> and <code>js</code> folder and copy the <code>favicon.ico</code> file into the <code>img</code> folder.</p> </li> <li> <p>3.2.2 - Replace the <code>favicon.svg</code> file in the root project directory.</p> </li> <li> <p>3.2.3 - Edit <code>index.html</code> and <code>App.js</code> files in the root project directory.  </p> </li> <li> <p>3.2.4 -  <code>Commit and Push</code> the Project Folder to the assigned BCMSL_[Project Name]  Github repository using.</p> </li> </ul> <p>VERY IMPORTANT REMINDER !!</p> <p>Please leave CLEAR &amp; READABLE commit messages when pushing changes to any BCMSL  Github repository.  </p> <p>License Notice</p> <p>Blue Coconut Multimedia Solutions Limited 52A Eccles Road, Grand Lagoon, Mayaro, Trinidad and Tobago, W.I. info@bluecoconut.ltd </p> <p>All Rights Reserved under the: MIT License (2023) </p>"},{"location":"notes.html","title":"a. Developer Notes","text":""},{"location":"notes.html#a1-automatic-signed-project-releases","title":"a.1 Automatic Signed Project Releases","text":""},{"location":"notes.html#pushing-a-signed-project-release-to-github","title":"Pushing a Signed Project Release to GitHub","text":"<p>The following arguments sets the tag name, signs the tag using GPG, verifies the signed tag, and then runs release-it. You can customize the configurations to fit your needs. Before running this script, make sure that you have GPG installed and configured on your system. You will also need to have a GPG key pair and tell Git about your signing key.  </p> <ul> <li>a.1.1 - To sign your tags automatically with GPG and release-it before pushing them to GitHub, ensure the following arguments that signs your tags are set properly <code>\"git.tagArgs\":[\"-s\"]</code> to ensure the tags are signed in Git, <code>\"git.push\": true</code>, <code>\"git.pushArgs\": [\"--follow-tags\"]</code>:  </li> </ul> <p>List of All Default Release-it Arguments</p> <ul> <li>These can be added (as necessary) to the release-it settings in the <code>package.json</code> located in the root of your project directory. package.json<pre><code>    {\n\"hooks\": {},\n\"git\": {\n\"changelog\": \"git log --pretty=format:\\\"* %s (%h)\\\" ${from}...${to}\",\n\"requireCleanWorkingDir\": true,\n\"requireBranch\": false,\n\"requireUpstream\": true,\n\"requireCommits\": false,\n\"requireCommitsFail\": true,\n\"commitsPath\": \"\",\n\"addUntrackedFiles\": false,\n\"commit\": true,\n\"commitMessage\": \"Release ${version}\",\n\"commitArgs\": [],\n\"tag\": true,\n\"tagExclude\": null,\n\"tagName\": null,\n\"tagMatch\": null,\n\"tagAnnotation\": \"Release ${version}\",\n\"tagArgs\": [],\n\"push\": true,\n\"pushArgs\": [\"--follow-tags\"],\n\"pushRepo\": \"\"\n},\n\"npm\": {\n\"publish\": true,\n\"publishPath\": \".\",\n\"publishArgs\": [],\n\"tag\": null,\n\"otp\": null,\n\"ignoreVersion\": false,\n\"allowSameVersion\": false,\n\"versionArgs\": [],\n\"skipChecks\": false,\n\"timeout\": 10\n},\n\"github\": {\n\"release\": false,\n\"releaseName\": \"Release v${version}\",\n\"releaseNotes\": null,\n\"autoGenerate\": false,\n\"preRelease\": false,\n\"draft\": false,\n\"tokenRef\": \"GITHUB_TOKEN\",\n\"assets\": null,\n\"host\": null,\n\"timeout\": 0,\n\"proxy\": null,\n\"skipChecks\": false,\n\"web\": false,\n\"comments\": {\n\"submit\": false,\n\"issue\": \":rocket: _This issue has been resolved in v${version}. See [${releaseName}](${releaseUrl}) for release notes._\",\n\"pr\": \":rocket: _This pull request is included in v${version}. See [${releaseName}](${releaseUrl}) for release notes._\"\n}\n},\n\"gitlab\": {\n\"release\": false,\n\"releaseName\": \"Release ${version}\",\n\"releaseNotes\": null,\n\"milestones\": [],\n\"tokenRef\": \"GITLAB_TOKEN\",\n\"tokenHeader\": \"Private-Token\",\n\"certificateAuthorityFile\": null,\n\"assets\": null,\n\"origin\": null,\n\"skipChecks\": false\n}\n}\n</code></pre></li> <li>Add Developer Note Here! &gt;&gt;  : <pre><code>&lt;&lt; add code here &gt;&gt;\n</code></pre></li> <li>Add Developer Note Here! &gt;&gt;  : <pre><code>&lt;&lt; add code here &gt;&gt;\n</code></pre> &lt;&lt; Add Developer Note Here! &gt;&gt;  :  <pre><code>&lt;&lt; add code here &gt;&gt;\n</code></pre></li> </ul> <ul> <li>a.1.2 - &lt;&lt; Add Developer Note Here! &gt;&gt;  </li> </ul> <p>Note: CLI Terminal Usage</p> <p>These images are basic examples. Both  CMD or  PowerShell Terminals would produce the same outputs or trigger the necessary terminal when running commands. Unless explicitly advised in certain instances, the developer would be required to manually switch to a specific CLI to run some commands. Example: Using  Git Bash for Unix-like Commands.</p> <ul> <li> <p>a.1.3 - &lt;&lt; Add Developer Note Here! &gt;&gt;</p> </li> <li> <p>a.3.4 - &lt;&lt; Add Developer Note Here! &gt;&gt;  </p> </li> </ul> <p>License Notice</p> <p>Blue Coconut Multimedia Solutions Limited 52A Eccles Road, Grand Lagoon, Mayaro, Trinidad and Tobago, W.I. info@bluecoconut.ltd </p> <p>MIT License (2023) </p>"},{"location":"reference.html","title":"Reference","text":""},{"location":"reference.html#15-vitereact-reference","title":"1.5 Vite+React Reference","text":""},{"location":"reference.html#151-vitereact-commands","title":"1.5.1 Vite+React Commands","text":"<ul> <li><code>npm run dev</code> - Start the developer live-reloading Vite+React server.</li> <li><code>npm serve</code>   - Start the live-reloading Vite+React server.</li> <li><code>npm build</code>   - Build the Vite+React web app.</li> </ul>"},{"location":"reference.html#152-vitereact-file-layout","title":"1.5.2 Vite+React File Layout","text":"<pre><code>   .gitignore ----------- # Git configuration file.\nindex.html ----------- # Web App configuration file.\nmkdocs.yml ----------- # MkDocs configuration file.\npackage.lock.json ---- # NodeJS lock configuration file.\npackage.json --------- # NodeJS configuration file.\nvite.config.js ------- # ViteJS configuration file.\ndocs/\n       index.md --------- # MkDocs documentation homepage.\nrequirements.md -- # MkDocs requirements page.\n...                # Other markdown pages, images and other files.\nsrc/\n       App.css ---------- # Web App CSS file.\nApp.js ----------- # Web App JS file.\nfavicon.svg ------ # Web App SVG Favicon file.\nindex.css -------- # Web App CSS Index file.\nlogo.svg --------- # Web App SVG Logo file.\nmain.jsx --------- # Web App JSX main file.\n</code></pre>"},{"location":"reference.html#16-mkdocs-reference","title":"1.6 MkDocs Reference","text":""},{"location":"reference.html#161-mkdocs-commands","title":"1.6.1 MkDocs Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code>          - Start the live-reloading docs server.</li> <li><code>mkdocs build</code>          - Build the documentation site.</li> <li><code>mkdocs -h</code>             - Print help message and exit.</li> </ul>"},{"location":"reference.html#162-mkdocs-file-layout","title":"1.6.2 MkDocs File Layout","text":"<pre><code>   mkdocs.yml ------- # MkDocs configuration file.\ndocs/\n   index.md --------- # MkDocs documentation homepage.\nrequirements.md -- # MkDocs requirements page.\n</code></pre> <p>License Notice</p> <p>Blue Coconut Multimedia Solutions Limited 52A Eccles Road, Grand Lagoon, Mayaro, Trinidad and Tobago, W.I. info@bluecoconut.ltd </p> <p>All Rights Reserved under the: MIT License (2023)</p>"},{"location":"required.html","title":"Requirements","text":""},{"location":"required.html#bcmsl-devops-basic-requirements","title":"BCMSL DevOps Basic Requirements","text":"<p>Developers are required to have the minimum services, software and hardware prepared before initiating any Blue Coconut Multimedia Solutions Limited software development projects.</p>"},{"location":"required.html#01-services","title":"0.1 Services","text":"<p>Project Developers must have access to the following services:</p> <ul> <li>A Verified  BCMSL Employee Account.</li> <li>A Verified  Github Account (GPG or SSH Secured).</li> <li>A Verified  GNU Privacy Guard CLI and Security Key.  </li> </ul> <p>GitHub Reference: Signature Verification</p> <p>Read either the adding GPG or SSH instructions for more information.  ALL GitHub Push Requests (Releases, Tags and Commits) MUST be verified by developer! </p> <p>Example of Verified Releases  : </p> <p>Example of Verified Commits  : </p> <p>Example of Verified Tags  : </p>"},{"location":"required.html#02-software","title":"0.2 Software","text":"<p>Project Developers must have the following software:</p> <ul> <li> <p>Installed  Visual Studio Code IDE application.</p> </li> <li> <p>Installed  Git version control system.</p> </li> <li> <p>Installed  NodeJS version 12.2.0 or higher server environment.</p> </li> <li> <p>Installed  NPM if not packaged with NodeJS.</p> </li> <li> <p>Installed  Python programming language.</p> </li> <li> <p>Installed  GitHub Desktop local CI (Continuous Integration) system.</p> </li> </ul>"},{"location":"required.html#03-hardware","title":"0.3 Hardware","text":"<p>Project Developers must have the following hardware:</p> <ul> <li> Minimum of ARM64 or x64 Processor; Quad-core or above.</li> <li> Minimum of 2 vCPU and 8 GB RAM / 4 vCPU and 16 GB of RAM.</li> <li> Minimum of 850 MB to 210 GB of available Hard disk space.</li> <li> Minimum of WXGA (1366 by 768) Video card display resolution.</li> </ul> <p>License Notice</p> <p>Blue Coconut Multimedia Solutions Limited 52A Eccles Road, Grand Lagoon, Mayaro, Trinidad and Tobago, W.I. info@bluecoconut.ltd </p> <p>All Rights Reserved under: MIT License (2023) </p>"},{"location":"version.html","title":"2. Version Control","text":""},{"location":"version.html#21-working-with-github","title":"2.1 Working with GitHub","text":""},{"location":"version.html#accessing-the-private-github-repository","title":"Accessing the (Private) GitHub Repository","text":"<p>After successfully Creating the Project Template, the lead developer at Blue Coconut Multimedia Solutions Limited would in most instances create and provide a private Github Repository to work from. In this step we continue by accessing the repository, then setting up an automatically updating changelog.</p> <ul> <li> <p>2.1.1 - Login to Github and navigate the cursor to the upper-right corner of any page and click the  notification icon to open the notifications page. </p> </li> <li> <p>2.1.2 - Select the Collaborator Request in the notifications list and click Accept Invitation to view the assigned Github repository. </p> </li> <li> <p>2.1.3 - Please follow the Rules and Policies of the repository to avoid any issues.</p> </li> </ul> <p>IMPORTANT NOTE: Developers require an Authenticated Github Account and  Repository!</p> <ul> <li> <p>Click HERE and Follow these steps if NO Github repository exists!</p> </li> <li> <p>All GitHub Push Requests (Releases, Tags and Commits) MUST be verified!</p> </li> </ul>"},{"location":"version.html#22-updating-git-configuration","title":"2.2 Updating Git Configuration","text":""},{"location":"version.html#updating-the-gitignore-file","title":"Updating the .gitignore file","text":"<ul> <li> <p>2.2.1 - To prevent uploading the documentation builds and the files contained inside it to the repository, add <code>/site</code> to your <code>.gitignore</code> file in the root directory of your project or simply run this command in the  <code>Git Bash</code> Terminal:  </p> <pre><code>echo \"site/\" &gt;&gt; .gitignore  </code></pre> </li> </ul>"},{"location":"version.html#23-creating-changelog","title":"2.3 Creating Changelog","text":""},{"location":"version.html#create-changelog-using-release-it-commitlint","title":"Create Changelog using Release-It &amp; CommitLint","text":"<ul> <li> <p>2.3.1 - In the  PowerShell Terminal install Release-It by running:</p> <pre><code>npm init release-it  \n</code></pre> <ul> <li>Then run the following command in the  PowerShell Terminal to install the Conventional Changelog for Release-It and CommitLint plugins:</li> </ul> <pre><code>npm install @release-it/conventional-changelog @commitlint/config-conventional @commitlint/cli --include=dev \n</code></pre> <p></p> </li> <li> <p>2.3.2 - Add the following configuration for Release-It in the <code>package.json</code> file:</p> <p>package.json<pre><code>\"scripts\": {\n\"release\": \"release-it\"\n},\n\"release-it\": {\n\"git\": {\n\"requireCleanWorkingDir\": false,\n\"commitMessage\": \"chore: Release v${version}\",\n\"tagName\": \"v${version}\",\n\"tagAnnotation\": \"Release v${version}\",\n\"tagArgs\": [\n\"-s\"\n],\n\"pushArgs\": [\n\"--follow-tags\"\n]\n},\n\"github\": {\n\"release\": true,\n\"releaseName\": \"Release ${version}\",\n\"tokenRef\": \"GITHUB_TOKEN\"\n},\n\"npm\": {\n\"publish\": false\n},\n\"plugins\": {\n\"@release-it/conventional-changelog\": {\n\"infile\": \"docs/changelog.md\",\n\"preset\": {\n\"name\": \"conventionalcommits\",\n\"types\": [\n{\n\"type\": \"add\",\n\"section\": \"Added:\"\n},\n{\n\"type\": \"del\",\n\"section\": \"Deleted:\"\n},\n{\n\"type\": \"deprec\",\n\"section\": \"Deprecated:\"\n},\n{\n\"type\": \"docs\",\n\"section\": \"Documentation:\"\n},\n{\n\"type\": \"feat\",\n\"section\": \"Features:\"\n},\n{\n\"type\": \"fix\",\n\"section\": \"Bug Fixes:\"\n},\n{\n\"type\": \"int\",\n\"section\": \"Integrated:\"\n},\n{\n\"type\": \"renamed\",\n\"section\": \"Renamed:\"\n},\n{\n\"type\": \"roll\",\n\"section\": \"Rollback:\"\n},\n{\n\"type\": \"refactor\",\n\"section\": \"Refactored:\"\n},\n{\n\"type\": \"update\",\n\"section\": \"Updated:\"\n},\n{}\n]\n}\n}\n}\n},\n</code></pre> </p> </li> </ul> <p>GitHub Reference: Review Source Code Application:</p> <p>Visit the codityco - GitHub Repository to view configuration of <code>package.json</code> file. </p> <ul> <li> <p>2.3.3 - Take a note of the <code>\"tagArgs\": [\"-s\"]</code> in the <code>package.json</code> file, this is mandatory for pushing singed tags to BCMSL GitHub repositories making them verified: </p> </li> <li> <p>2.3.4 - Install Husky from the  PowerShell Terminal by running the command:</p> <p><pre><code>npm install husky --include=dev \n</code></pre> </p> </li> <li> <p>2.3.5 - To add the the hooks that will allow the developer to run commands based off Git Actions, initialize a scheme by running the the following command from the  PowerShell Terminal:</p> <pre><code>./node_modules/husky/lib/bin.js install \n</code></pre> </li> <li> <p>2.3.6 - Create a <code>commit-msg</code> file in the <code>node_modules/husky</code> folder then run the following in  Git Bash Terminal:</p> <pre><code>touch node_modules/husky/commit-msg &amp;&amp; chmod a+x node_modules/husky/commit-msg </code></pre> </li> <li> <p>2.3.7 - Proceed to add the following to the <code>commit-msg</code> file.</p> <p>commit-msg<pre><code>#!/bin/sh\n.\"${dirname \"$0\")/_/husky.sh\"\nnpx commitlint --edit\n</code></pre>   The above allows Husky to run CommitLint so it can check the commit messages and run on the commit command. </p> </li> <li> <p>2.3.8 - Create a <code>changelog.md</code> file in the <code>docs</code> folder and enter the following information:</p> changelog.md<pre><code>  # [**:material-github::material-file-document-alert-outline:**](https://github.com/bluecoconutltd/BCMSL_DEV_Guidelines/blob/main/docs/changelog.md)\n\n  ***\n\n  ## **:material-menu-up-outline:**\n  ### **CHANGELOG :material-text-long:**\n  #### [Verified Release :octicons-verified-16:](https://github.com/bluecoconutltd/BCMSL_DEV_Guidelines/tags)\n\n  !!! note-license inline \"License Notice\"\n\n      [Blue Coconut Multimedia Solutions Limited](https://bluecoconut.ltd)  \n      52A Eccles Road, Grand Lagoon,  \n      Mayaro, Trinidad and Tobago, W.I.  \n      &lt;info@bluecoconut.ltd&gt;  \n      --------------------------\n      All Rights Reserved under the:  \n      [MIT License (2023)](license.md)  \n      ![BCMSL](assets/img/BCMSL LOGO DARK.svg#only-light){ width=\"50px\" } ![BCMSL](assets/img/BCMSL LOGO LIGHT.svg#only-dark){ width=\"50px\" }\n</code></pre> </li> <li> <p>2.3.9 - If not already existing, Add the following configuration data to the <code>mkdocs.yaml</code> file in the root directory ensuring it follows proper yaml formatting and save the changes.</p> mkdocs.yaml<pre><code>site_name: BCMSL [Project Name]\nsite_author: [Your Name]\ncopyright: Blue Coconut Multimedia Solutions Limited \u00a9 2023\nrepo_name: bluecoconutltd/BCMSL_[Project Name]\nrepo_url: https://github.com/bluecoconutltd/BCMSL_[Project Name]/\nedit_uri: edit/main/docs/\n## Navigation Configuration\nnav:\n- Welcome: index.md\n- 0. Overview: overview.md\n- 1. System Access: access.md\n- 2. System Features: features.md\n- 3. User Management: users.md\n- 4. Data Reports: reports.md\n- 5. KPIs: kpi.md\n- 6. Data Management: data.md\n- 7. References: reference.md\n- Changelog: changelog.md\n- License: license.md\n- Notes: notes.md\n## Theme Configuration\ntheme:\nname: material\ncustom_dir: overrides\nlogo: assets/img/BCMSL LOGO LIGHT ICON.svg\nfavicon: assets/img/favicon.ico\nicon:\nrepo: fontawesome/brands/git-alt\nedit: material/pencil\nview: material/eye\nadmonition:\nnote: octicons/tag-16\nabstract: octicons/checklist-16\ninfo: octicons/info-16\ntip: octicons/squirrel-16\nsuccess: octicons/code-16\nquestion: octicons/question-16\nwarning: octicons/alert-16\nfailure: octicons/x-circle-16\ndanger: octicons/zap-16\nbug: octicons/bug-16\nexample: octicons/beaker-16\nquote: octicons/quote-16\npalette:\n# Palette toggle for dark mode\n- media: \"(prefers-color-scheme: dark)\"\nscheme: slate toggle:\nicon: material/weather-night\nname: Switch to light mode\n# Palette toggle for light mode\n- media: \"(prefers-color-scheme: light)\"\nscheme: BCMSL_LIGHT\ntoggle:\nicon: material/weather-sunny\nname: Switch to dark mode\nfont:\ntext: Open Sans\ncode: Inconsolata\nfeatures:\n- navigation.instant\n- navigation.tabs.sticky\n- navigation.sections\n- navigation.path\n- navigation.prune\n- navigation.indexes\n- navigation.top\n- navigation.footer\n- toc.integrate\n- search.suggest\n- search.highlight\n- content.action.edit\n- content.code.copy\n- content.code.annotate\n- content.tabs.link\n- content.tooltips\n## Extra CSS Configuration\nextra_css:\n- assets/css/main.css\n## Extra JS Configuration\nextra_javascript:\n- https://unpkg.com/tablesort@5.3.0/dist/tablesort.min.js\n- assets/js/tablesort.js\n- assets/js/main.js\n## Extra Context Configuration\nextra:\nhomepage: https://bluecoconut.ltd\nversion:\nprovider: mike\nconsent:\ntitle: Cookie Consent\ndescription: &gt;- We use cookies to recognize your repeated visits and preferences, as well\nas to measure the effectiveness of our documentation and whether users\nfind what they're searching for. With your consent, you're helping us to\nmake our documentation better.\ncookies:\nanalytics:\nname: Google Analytics\nchecked: false\nactions:\n- accept\n- manage\ncopyright: &gt;\nCopyright &amp;copy; 2017 - 2023 Blue Coconut Multimedia Solutions Limited \u2013\n&lt;a href=\"#__consent\"&gt;Manage Settings&lt;/a&gt;\nsocial:\n- icon: fontawesome/brands/twitter\nlink: https://twitter.com/bluecoconutltd\nname: Blue Coconut Multimedia Solutions Limited\n- icon: fontawesome/brands/linkedin\nlink: https://linkedin.com/bluecoconutltd\nname: Blue Coconut Multimedia Solutions Limited\n- icon: fontawesome/brands/facebook\nlink: https://facebook.com/bluecoconutltd\nname: Blue Coconut Multimedia Solutions Limited\n- icon: fontawesome/brands/instagram\nlink: https://instagram.com/bluecoconutltd\nname: Blue Coconut Multimedia Solutions Limited\n- icon: fontawesome/brands/github\nlink: https://github.com/bluecoconutltd\nname: Blue Coconut Multimedia Solutions Limited\ngenerator: false\n## MarkDown Extensions Configuration\nmarkdown_extensions:\n- abbr\n- admonition\n- attr_list\n- def_list\n- md_in_html\n- footnotes\n- tables\n- pymdownx.critic\n- pymdownx.caret\n- pymdownx.keys\n- pymdownx.mark\n- pymdownx.tilde\n- pymdownx.details\n- pymdownx.superfences\n- pymdownx.inlinehilite\n- pymdownx.snippets\n- pymdownx.betterem\n- pymdownx.smartsymbols\n- pymdownx.tasklist:\ncustom_checkbox: true\n- pymdownx.arithmatex:\ngeneric: true\n- pymdownx.emoji:\nemoji_index: !!python/name:materialx.emoji.twemoji\nemoji_generator: !!python/name:materialx.emoji.to_svg\noptions:\ncustom_icons:\n- overrides/.icons\n- pymdownx.highlight:\nanchor_linenums: true\n- pymdownx.tabbed:\nalternate_style: true\n## Plugins Configuration\n# plugins:\n#     - search:\n#         separator: '[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&amp;[lg]t;'\n#     - glightbox\n#     - git-authors\n#     - git-revision-date-localized:\n#         enable_creation_date: true\n#         type: timeago\n#     - git-committers:\n#         repository: bluecoconutltd/BCMSL_DevOps_Guidelines\n#         branch: main\n#     - offline\n</code></pre> </li> <li> <p>2.3.10 - Once Auto-Save is on in  Visual Studio Code, any file changes would automatically be logged by Git. These changes can be committed and pushed to the repository either through:</p> <ol> <li> <p>(Preferred Method) Visual Studio Code by selecting the  Branch Icon, selecting the Initialize Repository button after, then click Commit and add the message \"Initial Commit\" when the window appears.   </p> <p>or</p> </li> <li> <p> GitHub Desktop by selecting the Commit to main button and then clicking the Push origin (Only Possible if Repository is already Initialized Locally).</p> <p>or</p> </li> <li> <p>running the following command in the   Git Bash Terminal:   <pre><code>git commit -a\n</code></pre>   When <code>commits</code> and <code>commit messages</code> are made by any of these programmes a passphrase prompt will appear to verify the developer's OpenPGP Key which is verified by GNU Privacy Guard. This passphrase would have been created when the developer was setting up their GNU Privacy Guard CLI and Security Key.   </p> </li> </ol> </li> <li> <p>2.3.11 - In either the  Visual Studio Code,  GitHub Desktop or  Git Bash Terminal, the developer can add the necessary 'Bug Fixes', 'Documentation', 'Features', etc. changelog categories with their respective keyword 'Fix: ', 'Doc: ', 'Feat: ', etc. to execute the <code>push actions</code> which automatically updates the commits to the <code>changelog.md</code> file under 'Bug Fixes', 'Documentation', 'Features', etc. section headings for the release.  </p> </li> </ul> <p>Conventional Changelog Commands</p> <p>When entering the commit message use the following appropriate method type below to label categories in the changelog after they are committed. EXAMPLE: \"Fix: Removed Callback Error String\"</p> Method Type Changelog Category (Section) Add: \"Then Write Commit Message\"              Added Del: \"Then Write Commit Message\"            Deleted Deprec: \"Then Write Commit Message\"         Deprecated Docs: \"Then Write Commit Message\"      Documentation Feat: \"Then Write Commit Message\"           Features Fix: \"Then Write Commit Message\"          Bug Fixes Int: \"Then Write Commit Message\"         Integrated Rename: \"Then Write Commit Message\"            Renamed Roll: \"Then Write Commit Message\"           Rollback Refactor: \"Then Write Commit Message\"         Refactored Update: \"Then Write Commit Message\"            Updated <p>IMPORTANT NOTE: Use ASSIGNED Commenting Format!</p> <p>Avoid making mistakes and making your work become \"invisible\" by creating unformatted comments.</p> <p><pre><code>Fix: Added Missing License Tag to Changelog\n</code></pre>   Then, if in the  Git Bash Terminal, press Enter to add the commit message. The developer can repeat running <code>git commit -a</code> to commit the 'Features' update below. In  Visual Studio Code pressing Enter moves you to a new line to enter a description/note to add clarity to the comment.</p> <pre><code>Feat: Added GitHub Repository Plugins </code></pre> <ul> <li>2.3.12 - Now run <code>npm run release patch</code> to release the 0.0.1 version of the Project to the changelog, which automatically adds the comments and release information to the created changelog which can be viewed here HERE in this documentation, or on the Github repository once it is pushed.</li> </ul> <p>Release-It Commands for Semantic Versioning of Push Actions!</p> <p>To push the patch version (i.e: 0.0.1) releases of the project use the following command: <pre><code>    npm run release patch\n</code></pre></p> <p>To push the minor version (i.e: 0.1.0) releases of the project use the following command: <pre><code>    npm run release minor\n</code></pre></p> <p>To push the major version (i.e: 1.0.0) releases of the project use the following command: <pre><code>    npm run release major\n</code></pre></p> <p>GitHub Reference: Strictly use Instructed Semantic Versioning for Repos and Logs!</p> <p>This automatically adds the comments and release information to the created changelog which can be viewed HERE in this documentation, or on the GitHub repository once it is pushed.</p> <ul> <li>2.3.13 - You will be prompted to choose if to <code>Commit</code>, <code>Tag</code>, <code>Push</code> and <code>Create a Release to [Github](https://github.com/)</code> to the Changeset of the Project, type <code>'Y'</code> and press Enter for each to accept. </li> </ul> <p>License Notice</p> <p>Blue Coconut Multimedia Solutions Limited 52A Eccles Road, Grand Lagoon, Mayaro, Trinidad and Tobago, W.I. info@bluecoconut.ltd </p> <p>All Rights Reserved under the: MIT License (2023) </p>"},{"location":"view.html","title":"4. View Project","text":""},{"location":"view.html#41-serving-the-documentation","title":"4.1 Serving the Documentation","text":""},{"location":"view.html#viewing-the-documentation-in-the-web-browser","title":"Viewing the documentation in the Web Browser","text":"<ul> <li> <p>4.1.1 - After the project folder is created by MkDocs, run <code>cd [dir-name]</code> to navigate to the project folder in the  PowerShell Terminal.</p> </li> <li> <p>4.1.2 - In the  PowerShell Terminal run <code>mkdocs serve</code> to start the live-reloading docs server, it should launch at http://127.0.0.1:8000/ or http://localhost:8000/. </p> </li> <li> <p>4.1.3 - Open any web browser, preferably Google Chrome or Mozilla Firefox and navigate to either http://127.0.0.1:8000/ or http://localhost:8000/ via the URL. </p> </li> </ul>"},{"location":"view.html#42-serving-the-react-project","title":"4.2 Serving the React Project","text":""},{"location":"view.html#running-the-react-project-in-the-web-browser","title":"Running the React Project in the Web Browser","text":"<ul> <li> <p>4.2.1 - When the project template installation is complete run <code>npm run dev</code> to start the live-reloading docs server, it should launch at http://127.0.0.1:5173/ or http://localhost:5173/. </p> </li> <li> <p>4.2.2 - Open any web browser, preferably Google Chrome or Mozilla Firefox and navigate to either http://127.0.0.1:8000/ or http://localhost:8000/ via the URL. </p> </li> </ul> <p>License Notice</p> <p>Blue Coconut Multimedia Solutions Limited 52A Eccles Road, Grand Lagoon, Mayaro, Trinidad and Tobago, W.I. info@bluecoconut.ltd </p> <p>All Rights Reserved under the: MIT License (2023) </p>"}]}